
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000630  00800100  00000a52  00000ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a52  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000011b  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000860  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000215  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008e7  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ff  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003d3  00000000  00000000  000028bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 b8 03 	call	0x770	; 0x770 <main>
  8e:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <data>:
#define  DEBUG_DELAY     1000000/DEBUG_BAUD
#define  dbg_enable()  DEBUG_DDR|= (1<<DEBUG_PIN)
#define  dbg_disable() DEBUG_DDR&=~(1<<DEBUG_PIN)

void data(uint8_t state){
if     (state==1){DEBUG_PORT|= (1<<DEBUG_PIN);}
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	11 f4       	brne	.+4      	; 0x9e <data+0x8>
  9a:	59 9a       	sbi	0x0b, 1	; 11
  9c:	08 95       	ret
else if(state==0){DEBUG_PORT&=~(1<<DEBUG_PIN);}
  9e:	88 23       	and	r24, r24
  a0:	09 f4       	brne	.+2      	; 0xa4 <data+0xe>
  a2:	59 98       	cbi	0x0b, 1	; 11
  a4:	08 95       	ret

000000a6 <dbg_single_byte>:
}

void dbg_single_byte(uint8_t byte){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2a 97       	sbiw	r28, 0x0a	; 10
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp[10]={0,0,0,0,0,0,0,0,0,1};
  c6:	fe 01       	movw	r30, r28
  c8:	31 96       	adiw	r30, 0x01	; 1
  ca:	9a e0       	ldi	r25, 0x0A	; 10
  cc:	df 01       	movw	r26, r30
  ce:	1d 92       	st	X+, r1
  d0:	9a 95       	dec	r25
  d2:	e9 f7       	brne	.-6      	; 0xce <dbg_single_byte+0x28>
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	9a 87       	std	Y+10, r25	; 0x0a
  d8:	fe 01       	movw	r30, r28
  da:	32 96       	adiw	r30, 0x02	; 2
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
for(uint8_t i=0;i<8;i++){tmp[i+1]=(byte>>i)&1;}
  e0:	48 2f       	mov	r20, r24
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	ca 01       	movw	r24, r20
  e6:	02 2e       	mov	r0, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <dbg_single_byte+0x48>
  ea:	95 95       	asr	r25
  ec:	87 95       	ror	r24
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <dbg_single_byte+0x44>
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	81 93       	st	Z+, r24
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	28 30       	cpi	r18, 0x08	; 8
  fc:	31 05       	cpc	r19, r1
  fe:	91 f7       	brne	.-28     	; 0xe4 <dbg_single_byte+0x3e>
 100:	8e 01       	movw	r16, r28
 102:	0f 5f       	subi	r16, 0xFF	; 255
 104:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	90 ed       	ldi	r25, 0xD0	; 208
 108:	c9 2e       	mov	r12, r25
 10a:	d1 2c       	mov	r13, r1
for(uint8_t i=0;i<10;i++){data(tmp[i]);_delay_us(DEBUG_DELAY);}
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	e8 2e       	mov	r14, r24
 110:	f1 2c       	mov	r15, r1
 112:	ec 0e       	add	r14, r28
 114:	fd 1e       	adc	r15, r29
 116:	f8 01       	movw	r30, r16
 118:	81 91       	ld	r24, Z+
 11a:	8f 01       	movw	r16, r30
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <data>
 120:	c6 01       	movw	r24, r12
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <dbg_single_byte+0x7c>
 126:	0e 15       	cp	r16, r14
 128:	1f 05       	cpc	r17, r15
 12a:	a9 f7       	brne	.-22     	; 0x116 <dbg_single_byte+0x70>
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <dbg_single_byte+0x8a>
_delay_us(DEBUG_DELAY*2);
}
 134:	2a 96       	adiw	r28, 0x0a	; 10
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	df 90       	pop	r13
 14e:	cf 90       	pop	r12
 150:	08 95       	ret

00000152 <dbg_print_integer>:
dbg_enable();
for(uint8_t i=0;i<strlen(c);i++){dbg_single_byte(c[i]);}
dbg_disable();
}

void dbg_print_integer(uint32_t num){
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	bf 92       	push	r11
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	2a 97       	sbiw	r28, 0x0a	; 10
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
 178:	ac 01       	movw	r20, r24
 17a:	cb 01       	movw	r24, r22
 17c:	da 01       	movw	r26, r20
 17e:	7c 01       	movw	r14, r24
 180:	8d 01       	movw	r16, r26
 182:	bb 24       	eor	r11, r11
 184:	4e 01       	movw	r8, r28
 186:	08 94       	sec
 188:	81 1c       	adc	r8, r1
 18a:	91 1c       	adc	r9, r1
 18c:	19 c0       	rjmp	.+50     	; 0x1c0 <dbg_print_integer+0x6e>
uint32_t curr=num;uint8_t buf[10],cnt=0;
while(curr!=0){buf[cnt]=curr%10;curr=curr/10;cnt++;}
 18e:	c8 0c       	add	r12, r8
 190:	d9 1c       	adc	r13, r9
 192:	c8 01       	movw	r24, r16
 194:	b7 01       	movw	r22, r14
 196:	2a e0       	ldi	r18, 0x0A	; 10
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 1a2:	f6 01       	movw	r30, r12
 1a4:	60 83       	st	Z, r22
 1a6:	c8 01       	movw	r24, r16
 1a8:	b7 01       	movw	r22, r14
 1aa:	2a e0       	ldi	r18, 0x0A	; 10
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 1b6:	c9 01       	movw	r24, r18
 1b8:	da 01       	movw	r26, r20
 1ba:	7c 01       	movw	r14, r24
 1bc:	8d 01       	movw	r16, r26
 1be:	b3 94       	inc	r11
 1c0:	cb 2c       	mov	r12, r11
 1c2:	dd 24       	eor	r13, r13
 1c4:	e1 14       	cp	r14, r1
 1c6:	f1 04       	cpc	r15, r1
 1c8:	01 05       	cpc	r16, r1
 1ca:	11 05       	cpc	r17, r1
 1cc:	01 f7       	brne	.-64     	; 0x18e <dbg_print_integer+0x3c>
 1ce:	84 01       	movw	r16, r8
 1d0:	0c 0d       	add	r16, r12
 1d2:	1d 1d       	adc	r17, r13
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <dbg_print_integer+0x8e>
for(int i=cnt-1;i>-1;i--){dbg_single_byte(buf[i]+48);}
 1d6:	f8 01       	movw	r30, r16
 1d8:	80 81       	ld	r24, Z
 1da:	80 5d       	subi	r24, 0xD0	; 208
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
 1e0:	01 50       	subi	r16, 0x01	; 1
 1e2:	10 40       	sbci	r17, 0x00	; 0
 1e4:	0c 17       	cp	r16, r28
 1e6:	1d 07       	cpc	r17, r29
 1e8:	b1 f7       	brne	.-20     	; 0x1d6 <dbg_print_integer+0x84>
}
 1ea:	2a 96       	adiw	r28, 0x0a	; 10
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	bf 90       	pop	r11
 208:	9f 90       	pop	r9
 20a:	8f 90       	pop	r8
 20c:	08 95       	ret

0000020e <dbg_print_hex>:

void dbg_print_hex(uint8_t hex){
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	98 2f       	mov	r25, r24
dbg_enable();
 214:	51 9a       	sbi	0x0a, 1	; 10
uint8_t d1=(hex/16);
 216:	82 95       	swap	r24
 218:	8f 70       	andi	r24, 0x0F	; 15
if(d1>9){d1=d1+55;}else{d1=d1+48;}
 21a:	8a 30       	cpi	r24, 0x0A	; 10
 21c:	18 f0       	brcs	.+6      	; 0x224 <dbg_print_hex+0x16>
 21e:	08 2f       	mov	r16, r24
 220:	09 5c       	subi	r16, 0xC9	; 201
 222:	02 c0       	rjmp	.+4      	; 0x228 <dbg_print_hex+0x1a>
 224:	08 2f       	mov	r16, r24
 226:	00 5d       	subi	r16, 0xD0	; 208
uint8_t d2=(hex%16);
 228:	89 2f       	mov	r24, r25
 22a:	8f 70       	andi	r24, 0x0F	; 15
if(d2>9){d2=d2+55;}else{d2=d2+48;}
 22c:	8a 30       	cpi	r24, 0x0A	; 10
 22e:	18 f0       	brcs	.+6      	; 0x236 <dbg_print_hex+0x28>
 230:	18 2f       	mov	r17, r24
 232:	19 5c       	subi	r17, 0xC9	; 201
 234:	02 c0       	rjmp	.+4      	; 0x23a <dbg_print_hex+0x2c>
 236:	18 2f       	mov	r17, r24
 238:	10 5d       	subi	r17, 0xD0	; 208
dbg_single_byte('0');
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
dbg_single_byte('x');
 240:	88 e7       	ldi	r24, 0x78	; 120
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
dbg_single_byte(d1);
 246:	80 2f       	mov	r24, r16
 248:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
dbg_single_byte(d2);
 24c:	81 2f       	mov	r24, r17
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
dbg_disable();
 252:	51 98       	cbi	0x0a, 1	; 10
}
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <dbg_print_number>:



/*For printing any number(including int & float) use this function*/
/*If you want to display float number just put always_float=1*/
void dbg_print_number(double num, uint8_t always_float){
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	7b 01       	movw	r14, r22
 266:	8c 01       	movw	r16, r24
 268:	d4 2e       	mov	r13, r20
dbg_enable();
 26a:	51 9a       	sbi	0x0a, 1	; 10
if     (num<0) {num=-num;dbg_single_byte('-');}
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__cmpsf2>
 278:	88 23       	and	r24, r24
 27a:	3c f4       	brge	.+14     	; 0x28a <dbg_print_number+0x30>
 27c:	17 fb       	bst	r17, 7
 27e:	10 95       	com	r17
 280:	17 f9       	bld	r17, 7
 282:	10 95       	com	r17
 284:	8d e2       	ldi	r24, 0x2D	; 45
 286:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
uint32_t bfp_digit=num;
uint32_t afp_digit=num*100.05;
dbg_print_integer(bfp_digit);
 28a:	c8 01       	movw	r24, r16
 28c:	b7 01       	movw	r22, r14
 28e:	0e 94 01 04 	call	0x802	; 0x802 <__fixunssfsi>
 292:	0e 94 a9 00 	call	0x152	; 0x152 <dbg_print_integer>
if(always_float==1){
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	d8 16       	cp	r13, r24
 29a:	79 f5       	brne	.+94     	; 0x2fa <dbg_print_number+0xa0>
/*If you want to display float number just put always_float=1*/
void dbg_print_number(double num, uint8_t always_float){
dbg_enable();
if     (num<0) {num=-num;dbg_single_byte('-');}
uint32_t bfp_digit=num;
uint32_t afp_digit=num*100.05;
 29c:	c8 01       	movw	r24, r16
 29e:	b7 01       	movw	r22, r14
 2a0:	2a e9       	ldi	r18, 0x9A	; 154
 2a2:	39 e1       	ldi	r19, 0x19	; 25
 2a4:	48 ec       	ldi	r20, 0xC8	; 200
 2a6:	52 e4       	ldi	r21, 0x42	; 66
 2a8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__mulsf3>
 2ac:	0e 94 01 04 	call	0x802	; 0x802 <__fixunssfsi>
 2b0:	7b 01       	movw	r14, r22
 2b2:	8c 01       	movw	r16, r24
dbg_print_integer(bfp_digit);
if(always_float==1){
  dbg_single_byte('.');
 2b4:	8e e2       	ldi	r24, 0x2E	; 46
 2b6:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
  dbg_single_byte(((afp_digit/10)%10)+48);
 2ba:	b7 01       	movw	r22, r14
 2bc:	c8 01       	movw	r24, r16
 2be:	2a e0       	ldi	r18, 0x0A	; 10
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 2ca:	ca 01       	movw	r24, r20
 2cc:	b9 01       	movw	r22, r18
 2ce:	2a e0       	ldi	r18, 0x0A	; 10
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 2da:	86 2f       	mov	r24, r22
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
  dbg_single_byte((afp_digit%10)+48);
 2e2:	b7 01       	movw	r22, r14
 2e4:	c8 01       	movw	r24, r16
 2e6:	2a e0       	ldi	r18, 0x0A	; 10
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 05 05 	call	0xa0a	; 0xa0a <__udivmodsi4>
 2f2:	86 2f       	mov	r24, r22
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
  }
dbg_disable();
 2fa:	51 98       	cbi	0x0a, 1	; 10
}
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	08 95       	ret

00000308 <led>:




void led(uint8_t state){
DDRC |=(1<<5);
 308:	3d 9a       	sbi	0x07, 5	; 7
if     (state==0x00){PORTC&=~(1<<5);}
 30a:	88 23       	and	r24, r24
 30c:	11 f4       	brne	.+4      	; 0x312 <led+0xa>
 30e:	45 98       	cbi	0x08, 5	; 8
 310:	08 95       	ret
else if(state==0x01){PORTC|= (1<<5);}
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	09 f4       	brne	.+2      	; 0x318 <led+0x10>
 316:	45 9a       	sbi	0x08, 5	; 8
 318:	08 95       	ret

0000031a <spi_init>:
}

void spi_init(void){
DDRB |=(1<<2)|(1<<3)|(1<<4)|(1<<5);
 31a:	84 b1       	in	r24, 0x04	; 4
 31c:	8c 63       	ori	r24, 0x3C	; 60
 31e:	84 b9       	out	0x04, r24	; 4
PORTB&=~(1<<2);
 320:	2a 98       	cbi	0x05, 2	; 5
PORTB&=~(1<<5);
 322:	2d 98       	cbi	0x05, 5	; 5
 324:	88 ec       	ldi	r24, 0xC8	; 200
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <spi_init+0x10>

_delay_us(100);
PORTB|=(1<<2);
 32e:	2a 9a       	sbi	0x05, 2	; 5
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <spi_init+0x16>
_delay_us(100);
PORTB&=~(1<<2);
 334:	2a 98       	cbi	0x05, 2	; 5
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
 336:	83 e5       	ldi	r24, 0x53	; 83
 338:	8c bd       	out	0x2c, r24	; 44
}
 33a:	08 95       	ret

0000033c <spi_tx>:

uint8_t spi_tx(uint8_t data){
SPDR = data;
 33c:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
 33e:	0d b4       	in	r0, 0x2d	; 45
 340:	07 fe       	sbrs	r0, 7
 342:	fd cf       	rjmp	.-6      	; 0x33e <spi_tx+0x2>
return SPDR;
 344:	8e b5       	in	r24, 0x2e	; 46
}
 346:	08 95       	ret

00000348 <prgm_mode>:

uint8_t prgm_mode(void){
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	10 e0       	ldi	r17, 0x00	; 0
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 350:	2c ea       	ldi	r18, 0xAC	; 172
 352:	f2 2e       	mov	r15, r18

uint8_t prgm_mode(void){

uint8_t status=0x00,timeout=0x00;
while(status!=0x53){
   spi_init();
 354:	03 e5       	ldi	r16, 0x53	; 83
 356:	0e 94 8d 01 	call	0x31a	; 0x31a <spi_init>
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 35a:	fe bc       	out	0x2e, r15	; 46
while((SPSR & (1 << SPIF))==0);
 35c:	0d b4       	in	r0, 0x2d	; 45
 35e:	07 fe       	sbrs	r0, 7
 360:	fd cf       	rjmp	.-6      	; 0x35c <prgm_mode+0x14>
return SPDR;
 362:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 364:	0e bd       	out	0x2e, r16	; 46
while((SPSR & (1 << SPIF))==0);
 366:	0d b4       	in	r0, 0x2d	; 45
 368:	07 fe       	sbrs	r0, 7
 36a:	fd cf       	rjmp	.-6      	; 0x366 <prgm_mode+0x1e>
return SPDR;
 36c:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 36e:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 370:	0d b4       	in	r0, 0x2d	; 45
 372:	07 fe       	sbrs	r0, 7
 374:	fd cf       	rjmp	.-6      	; 0x370 <prgm_mode+0x28>
return SPDR;
 376:	9e b5       	in	r25, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 378:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 37a:	0d b4       	in	r0, 0x2d	; 45
 37c:	07 fe       	sbrs	r0, 7
 37e:	fd cf       	rjmp	.-6      	; 0x37a <prgm_mode+0x32>
return SPDR;
 380:	8e b5       	in	r24, 0x2e	; 46
   spi_init();
   spi_tx(0xAC);
   spi_tx(0x53);
   status=spi_tx(0x00);
   spi_tx(0x00);
   timeout++;
 382:	1f 5f       	subi	r17, 0xFF	; 255
   if(timeout>0x0F){break;}
 384:	10 31       	cpi	r17, 0x10	; 16
 386:	19 f0       	breq	.+6      	; 0x38e <prgm_mode+0x46>
}

uint8_t prgm_mode(void){

uint8_t status=0x00,timeout=0x00;
while(status!=0x53){
 388:	93 35       	cpi	r25, 0x53	; 83
 38a:	29 f7       	brne	.-54     	; 0x356 <prgm_mode+0xe>
 38c:	03 c0       	rjmp	.+6      	; 0x394 <prgm_mode+0x4c>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	93 35       	cpi	r25, 0x53	; 83
 392:	09 f4       	brne	.+2      	; 0x396 <prgm_mode+0x4e>
 394:	81 e0       	ldi	r24, 0x01	; 1
   spi_tx(0x00);
   timeout++;
   if(timeout>0x0F){break;}
   }
   if(status==0x53){return 1;}else{return 0;}
}
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	08 95       	ret

0000039e <device_ID>:

uint8_t device_ID(uint8_t id){
 39e:	98 2f       	mov	r25, r24
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
 3a4:	0d b4       	in	r0, 0x2d	; 45
 3a6:	07 fe       	sbrs	r0, 7
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <device_ID+0x6>
return SPDR;
 3aa:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3ac:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 3ae:	0d b4       	in	r0, 0x2d	; 45
 3b0:	07 fe       	sbrs	r0, 7
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <device_ID+0x10>
return SPDR;
 3b4:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3b6:	9e bd       	out	0x2e, r25	; 46
while((SPSR & (1 << SPIF))==0);
 3b8:	0d b4       	in	r0, 0x2d	; 45
 3ba:	07 fe       	sbrs	r0, 7
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <device_ID+0x1a>
return SPDR;
 3be:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3c0:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 3c2:	0d b4       	in	r0, 0x2d	; 45
 3c4:	07 fe       	sbrs	r0, 7
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <device_ID+0x24>
return SPDR;
 3c8:	8e b5       	in	r24, 0x2e	; 46
spi_tx(0x30);
spi_tx(0x00);
spi_tx(id);
s=spi_tx(0x00);
return s;
}
 3ca:	08 95       	ret

000003cc <Lfuse>:
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3cc:	80 e5       	ldi	r24, 0x50	; 80
 3ce:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
 3d0:	0d b4       	in	r0, 0x2d	; 45
 3d2:	07 fe       	sbrs	r0, 7
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <Lfuse+0x4>
return SPDR;
 3d6:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3d8:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 3da:	0d b4       	in	r0, 0x2d	; 45
 3dc:	07 fe       	sbrs	r0, 7
 3de:	fd cf       	rjmp	.-6      	; 0x3da <Lfuse+0xe>
return SPDR;
 3e0:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3e2:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 3e4:	0d b4       	in	r0, 0x2d	; 45
 3e6:	07 fe       	sbrs	r0, 7
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <Lfuse+0x18>
return SPDR;
 3ea:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3ec:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 3ee:	0d b4       	in	r0, 0x2d	; 45
 3f0:	07 fe       	sbrs	r0, 7
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <Lfuse+0x22>
return SPDR;
 3f4:	8e b5       	in	r24, 0x2e	; 46
spi_tx(0x50);
spi_tx(0x00);
spi_tx(0x00);
s=spi_tx(0x00);
return s;
}
 3f6:	08 95       	ret

000003f8 <Hfuse>:
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 3f8:	88 e5       	ldi	r24, 0x58	; 88
 3fa:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
 3fc:	0d b4       	in	r0, 0x2d	; 45
 3fe:	07 fe       	sbrs	r0, 7
 400:	fd cf       	rjmp	.-6      	; 0x3fc <Hfuse+0x4>
return SPDR;
 402:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
 408:	0d b4       	in	r0, 0x2d	; 45
 40a:	07 fe       	sbrs	r0, 7
 40c:	fd cf       	rjmp	.-6      	; 0x408 <Hfuse+0x10>
return SPDR;
 40e:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 410:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 412:	0d b4       	in	r0, 0x2d	; 45
 414:	07 fe       	sbrs	r0, 7
 416:	fd cf       	rjmp	.-6      	; 0x412 <Hfuse+0x1a>
return SPDR;
 418:	8e b5       	in	r24, 0x2e	; 46
PORTB&=~(1<<2);
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
}

uint8_t spi_tx(uint8_t data){
SPDR = data;
 41a:	1e bc       	out	0x2e, r1	; 46
while((SPSR & (1 << SPIF))==0);
 41c:	0d b4       	in	r0, 0x2d	; 45
 41e:	07 fe       	sbrs	r0, 7
 420:	fd cf       	rjmp	.-6      	; 0x41c <Hfuse+0x24>
return SPDR;
 422:	8e b5       	in	r24, 0x2e	; 46
spi_tx(0x58);
spi_tx(0x08);
spi_tx(0x00);
s=spi_tx(0x00);
return s;
 424:	08 95       	ret

00000426 <turn_off_peripherals>:
#define  TWI_I2C_OFF TRUE   /*CUSTOMIZABLE*/



void turn_off_peripherals(void){
ADCSRA&=~(1<<ADEN);
 426:	ea e7       	ldi	r30, 0x7A	; 122
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	8f 77       	andi	r24, 0x7F	; 127
 42e:	80 83       	st	Z, r24
ACSR  |=(1<<ACD);
 430:	80 b7       	in	r24, 0x30	; 48
 432:	80 68       	ori	r24, 0x80	; 128
 434:	80 bf       	out	0x30, r24	; 48
PRR    =(ADC_OFF<<0)|(USART_OFF<<1)|(SPI_OFF<<2)|(TIMER1_OFF<<3);
 436:	e4 e6       	ldi	r30, 0x64	; 100
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	80 83       	st	Z, r24
PRR   |=(TIMER0_OFF<<5)|(TIMER2_OFF<<6)|(TWI_I2C_OFF<<7);
 43e:	80 81       	ld	r24, Z
 440:	80 6e       	ori	r24, 0xE0	; 224
 442:	80 83       	st	Z, r24
DDRB=0xFF;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	84 b9       	out	0x04, r24	; 4
PORTB=0x00;
 448:	15 b8       	out	0x05, r1	; 5
DDRC=0xFF;
 44a:	87 b9       	out	0x07, r24	; 7
PORTC=0x00;
 44c:	18 b8       	out	0x08, r1	; 8
DDRD=0xFF;
 44e:	8a b9       	out	0x0a, r24	; 10
PORTD=0x00;
 450:	1b b8       	out	0x0b, r1	; 11
DEBUG_DDR&=~(1<<DEBUG_PIN);
 452:	51 98       	cbi	0x0a, 1	; 10
DEBUG_PORT&=~(1<<DEBUG_PIN);
 454:	59 98       	cbi	0x0b, 1	; 11
}
 456:	08 95       	ret

00000458 <deep_sleep>:

void deep_sleep(void){
set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 458:	83 b7       	in	r24, 0x33	; 51
 45a:	81 7f       	andi	r24, 0xF1	; 241
 45c:	84 60       	ori	r24, 0x04	; 4
 45e:	83 bf       	out	0x33, r24	; 51
sleep_enable();
 460:	83 b7       	in	r24, 0x33	; 51
 462:	81 60       	ori	r24, 0x01	; 1
 464:	83 bf       	out	0x33, r24	; 51
sleep_bod_disable();
 466:	85 b7       	in	r24, 0x35	; 53
 468:	80 66       	ori	r24, 0x60	; 96
 46a:	85 bf       	out	0x35, r24	; 53
 46c:	8f 7d       	andi	r24, 0xDF	; 223
 46e:	85 bf       	out	0x35, r24	; 53
sei();
 470:	78 94       	sei
sleep_cpu();
 472:	88 95       	sleep
sleep_disable();
 474:	83 b7       	in	r24, 0x33	; 51
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	83 bf       	out	0x33, r24	; 51
}
 47a:	08 95       	ret

0000047c <dbg_print_text>:
for(uint8_t i=0;i<10;i++){data(tmp[i]);_delay_us(DEBUG_DELAY);}
_delay_us(DEBUG_DELAY*2);
}

/*For printing text use this function*/
void dbg_print_text(char *c){
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	8c 01       	movw	r16, r24
dbg_enable();
 488:	51 9a       	sbi	0x0a, 1	; 10
 48a:	ff 24       	eor	r15, r15
 48c:	06 c0       	rjmp	.+12     	; 0x49a <dbg_print_text+0x1e>
for(uint8_t i=0;i<strlen(c);i++){dbg_single_byte(c[i]);}
 48e:	c0 0f       	add	r28, r16
 490:	d1 1f       	adc	r29, r17
 492:	88 81       	ld	r24, Y
 494:	0e 94 53 00 	call	0xa6	; 0xa6 <dbg_single_byte>
 498:	f3 94       	inc	r15
 49a:	cf 2d       	mov	r28, r15
 49c:	d0 e0       	ldi	r29, 0x00	; 0
 49e:	f8 01       	movw	r30, r16
 4a0:	01 90       	ld	r0, Z+
 4a2:	00 20       	and	r0, r0
 4a4:	e9 f7       	brne	.-6      	; 0x4a0 <dbg_print_text+0x24>
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	e0 1b       	sub	r30, r16
 4aa:	f1 0b       	sbc	r31, r17
 4ac:	ce 17       	cp	r28, r30
 4ae:	df 07       	cpc	r29, r31
 4b0:	70 f3       	brcs	.-36     	; 0x48e <dbg_print_text+0x12>
dbg_disable();
 4b2:	51 98       	cbi	0x0a, 1	; 10
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	08 95       	ret

000004c0 <atmega328p>:
					 var=Hfuse();
					 dbg_print_hex(var);
					 dbg_print_text("]\n");
}

void atmega328p(void){
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
uint8_t device=0x00;
device=device_ID(2);
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	0e 94 cf 01 	call	0x39e	; 0x39e <device_ID>
if(device==ATmega328p)    dbg_print_text("Device ID     : ATmega328p\n");
 4cc:	8f 30       	cpi	r24, 0x0F	; 15
 4ce:	19 f4       	brne	.+6      	; 0x4d6 <atmega328p+0x16>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <atmega328p+0x1e>
else if(device==ATmega328)dbg_print_text("Device ID     : ATmega328\n");
 4d6:	84 31       	cpi	r24, 0x14	; 20
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <atmega328p+0x22>
 4da:	8c e1       	ldi	r24, 0x1C	; 28
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
uint8_t var=0x00;
var=Lfuse();
 4e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
if     ((var & 0x0F)==ATmega328p_8MHz){                  dbg_print_text("CPU frequency : Internal RC 8MHz\n");}
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	90 70       	andi	r25, 0x00	; 0
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	91 05       	cpc	r25, r1
 4f0:	19 f4       	brne	.+6      	; 0x4f8 <atmega328p+0x38>
 4f2:	87 e3       	ldi	r24, 0x37	; 55
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <atmega328p+0x40>
else if((var & 0x0F)==ATmega328p_128kHz){                dbg_print_text("CPU frequency : Internal RC 128kHz\n");}
 4f8:	03 97       	sbiw	r24, 0x03	; 3
 4fa:	21 f4       	brne	.+8      	; 0x504 <atmega328p+0x44>
 4fc:	89 e5       	ldi	r24, 0x59	; 89
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
var=Lfuse();
 504:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
 508:	18 2f       	mov	r17, r24
if(((var & 0x30)>>4)==0)  {                             dbg_print_text("Start-up time : 6 CK, 0 ms\n");}
 50a:	c8 2f       	mov	r28, r24
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	ce 01       	movw	r24, r28
 510:	80 73       	andi	r24, 0x30	; 48
 512:	90 70       	andi	r25, 0x00	; 0
 514:	44 e0       	ldi	r20, 0x04	; 4
 516:	95 95       	asr	r25
 518:	87 95       	ror	r24
 51a:	4a 95       	dec	r20
 51c:	e1 f7       	brne	.-8      	; 0x516 <atmega328p+0x56>
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	19 f4       	brne	.+6      	; 0x528 <atmega328p+0x68>
 522:	8d e7       	ldi	r24, 0x7D	; 125
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0a c0       	rjmp	.+20     	; 0x53c <atmega328p+0x7c>
else if(((var & 0x30)>>4)==1)  {                        dbg_print_text("Start-up time : 6 CK, 4.1 ms\n");}
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	91 05       	cpc	r25, r1
 52c:	19 f4       	brne	.+6      	; 0x534 <atmega328p+0x74>
 52e:	89 e9       	ldi	r24, 0x99	; 153
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	04 c0       	rjmp	.+8      	; 0x53c <atmega328p+0x7c>
else if(((var & 0x30)>>4)==2)  {                        dbg_print_text("Start-up time : 6 CK, 65 ms\n");}
 534:	02 97       	sbiw	r24, 0x02	; 2
 536:	21 f4       	brne	.+8      	; 0x540 <atmega328p+0x80>
 538:	87 eb       	ldi	r24, 0xB7	; 183
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<7))==0){                                  dbg_print_text("CKDIV8        : Enabled (Clock divided by 8)\n");}
 540:	17 fd       	sbrc	r17, 7
 542:	03 c0       	rjmp	.+6      	; 0x54a <atmega328p+0x8a>
 544:	84 ed       	ldi	r24, 0xD4	; 212
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	02 c0       	rjmp	.+4      	; 0x54e <atmega328p+0x8e>
else{                                                     dbg_print_text("CKDIV8        : Disabled (Clock divided by 1)\n");}
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<6))==0){                                  dbg_print_text("Clock output  : Enabled\n");}
 552:	c6 fd       	sbrc	r28, 6
 554:	03 c0       	rjmp	.+6      	; 0x55c <atmega328p+0x9c>
 556:	81 e3       	ldi	r24, 0x31	; 49
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	02 c0       	rjmp	.+4      	; 0x560 <atmega328p+0xa0>
else{                                                     dbg_print_text("Clock output  : Disabled\n");}
 55c:	8a e4       	ldi	r24, 0x4A	; 74
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>

var=Hfuse();
 564:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Hfuse>
if((var & (1<<0))==0){                                  dbg_print_text("Boot Reset    : Enabled\n");}
 568:	c8 2f       	mov	r28, r24
 56a:	d0 e0       	ldi	r29, 0x00	; 0
 56c:	80 fd       	sbrc	r24, 0
 56e:	03 c0       	rjmp	.+6      	; 0x576 <atmega328p+0xb6>
 570:	84 e6       	ldi	r24, 0x64	; 100
 572:	92 e0       	ldi	r25, 0x02	; 2
 574:	02 c0       	rjmp	.+4      	; 0x57a <atmega328p+0xba>
else{                                                     dbg_print_text("Boot Reset    : Disabled\n");}
 576:	8d e7       	ldi	r24, 0x7D	; 125
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if     (((var & 0x06)>>1)==0){                          dbg_print_text("Boot Size     : 2048 words (4096 bytes)\n");}
 57e:	ce 01       	movw	r24, r28
 580:	86 70       	andi	r24, 0x06	; 6
 582:	90 70       	andi	r25, 0x00	; 0
 584:	95 95       	asr	r25
 586:	87 95       	ror	r24
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	19 f4       	brne	.+6      	; 0x592 <atmega328p+0xd2>
 58c:	87 e9       	ldi	r24, 0x97	; 151
 58e:	92 e0       	ldi	r25, 0x02	; 2
 590:	0d c0       	rjmp	.+26     	; 0x5ac <atmega328p+0xec>
else if(((var & 0x06)>>1)==1){                          dbg_print_text("Boot Size     : 1024 words (2048 bytes)\n");}
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	91 05       	cpc	r25, r1
 596:	19 f4       	brne	.+6      	; 0x59e <atmega328p+0xde>
 598:	80 ec       	ldi	r24, 0xC0	; 192
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <atmega328p+0xec>
else if(((var & 0x06)>>1)==2){                          dbg_print_text("Boot Size     : 512 words(1024 bytes)\n");}
 59e:	02 97       	sbiw	r24, 0x02	; 2
 5a0:	19 f4       	brne	.+6      	; 0x5a8 <atmega328p+0xe8>
 5a2:	89 ee       	ldi	r24, 0xE9	; 233
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <atmega328p+0xec>
else if(((var & 0x06)>>1)==3){                          dbg_print_text("Boot Size     : 256 words(512 bytes)\n");}
 5a8:	80 e1       	ldi	r24, 0x10	; 16
 5aa:	93 e0       	ldi	r25, 0x03	; 3
 5ac:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<3))==0){                                  dbg_print_text("EESAVE        : Enabled (EEPROM preserved when chip erased)\n");}
 5b0:	c3 fd       	sbrc	r28, 3
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <atmega328p+0xfa>
 5b4:	86 e3       	ldi	r24, 0x36	; 54
 5b6:	93 e0       	ldi	r25, 0x03	; 3
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <atmega328p+0xfe>
else{                                                     dbg_print_text("EESAVE        : Disabled (EEPROM erased when chip erased)\n");}
 5ba:	83 e7       	ldi	r24, 0x73	; 115
 5bc:	93 e0       	ldi	r25, 0x03	; 3
 5be:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<6))==0){                                  dbg_print_text("DebugWire     : Enabled\n");}
 5c2:	c6 fd       	sbrc	r28, 6
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <atmega328p+0x10c>
 5c6:	8e ea       	ldi	r24, 0xAE	; 174
 5c8:	93 e0       	ldi	r25, 0x03	; 3
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <atmega328p+0x110>
else{                                                     dbg_print_text("DebugWire     : Disabled\n");}
 5cc:	87 ec       	ldi	r24, 0xC7	; 199
 5ce:	93 e0       	ldi	r25, 0x03	; 3
 5d0:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<4))==0){                                  dbg_print_text("WDTON         : Enabled (Watchdog always on)\n");}
 5d4:	c4 fd       	sbrc	r28, 4
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <atmega328p+0x11e>
 5d8:	81 ee       	ldi	r24, 0xE1	; 225
 5da:	93 e0       	ldi	r25, 0x03	; 3
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <atmega328p+0x122>
else                   {                                  dbg_print_text("WDTON         : disabled (Watchdog off)\n");}
 5de:	8f e0       	ldi	r24, 0x0F	; 15
 5e0:	94 e0       	ldi	r25, 0x04	; 4
 5e2:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
dbg_print_text("\nFuse Bits     : LF[");
 5e6:	88 e3       	ldi	r24, 0x38	; 56
 5e8:	94 e0       	ldi	r25, 0x04	; 4
 5ea:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
                     var=Lfuse();
 5ee:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
					 dbg_print_hex(var);
 5f2:	0e 94 07 01 	call	0x20e	; 0x20e <dbg_print_hex>
					 dbg_print_text("]  HF[");
 5f6:	8d e4       	ldi	r24, 0x4D	; 77
 5f8:	94 e0       	ldi	r25, 0x04	; 4
 5fa:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
					 var=Hfuse();
 5fe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Hfuse>
					 dbg_print_hex(var);
 602:	0e 94 07 01 	call	0x20e	; 0x20e <dbg_print_hex>
					 dbg_print_text("]\n");
 606:	84 e5       	ldi	r24, 0x54	; 84
 608:	94 e0       	ldi	r25, 0x04	; 4
 60a:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	08 95       	ret

00000616 <atmega8>:
#define  ATmega8_8MHz      0x04

#define  ATmega328p_8MHz   0x02
#define  ATmega328p_128kHz 0x03

void atmega8(void){
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
dbg_print_text("Device ID     : ATmega8\n");
 61c:	87 e5       	ldi	r24, 0x57	; 87
 61e:	94 e0       	ldi	r25, 0x04	; 4
 620:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
uint8_t var=0x00;
var=Lfuse();
 624:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
if     ((var & 0x0F)==ATmega8_1MHz){                     dbg_print_text("CPU frequency : Internal RC 1MHz\n");}
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	8f 70       	andi	r24, 0x0F	; 15
 62c:	90 70       	andi	r25, 0x00	; 0
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	91 05       	cpc	r25, r1
 632:	19 f4       	brne	.+6      	; 0x63a <atmega8+0x24>
 634:	80 e7       	ldi	r24, 0x70	; 112
 636:	94 e0       	ldi	r25, 0x04	; 4
 638:	10 c0       	rjmp	.+32     	; 0x65a <atmega8+0x44>
                     else if((var & 0x0F)==ATmega8_2MHz){dbg_print_text("CPU frequency : Internal RC 2MHz\n");}
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 05       	cpc	r25, r1
 63e:	19 f4       	brne	.+6      	; 0x646 <atmega8+0x30>
 640:	82 e9       	ldi	r24, 0x92	; 146
 642:	94 e0       	ldi	r25, 0x04	; 4
 644:	0a c0       	rjmp	.+20     	; 0x65a <atmega8+0x44>
                     else if((var & 0x0F)==ATmega8_4MHz){dbg_print_text("CPU frequency : Internal RC 4MHz\n");}
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	91 05       	cpc	r25, r1
 64a:	19 f4       	brne	.+6      	; 0x652 <atmega8+0x3c>
 64c:	84 eb       	ldi	r24, 0xB4	; 180
 64e:	94 e0       	ldi	r25, 0x04	; 4
 650:	04 c0       	rjmp	.+8      	; 0x65a <atmega8+0x44>
                     else if((var & 0x0F)==ATmega8_8MHz){dbg_print_text("CPU frequency : Internal RC 8MHz\n");}
 652:	04 97       	sbiw	r24, 0x04	; 4
 654:	21 f4       	brne	.+8      	; 0x65e <atmega8+0x48>
 656:	87 e3       	ldi	r24, 0x37	; 55
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
var=Lfuse();
 65e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
 662:	18 2f       	mov	r17, r24
if(((var & 0x30)>>4)==0)  {                             dbg_print_text("Start-up time : 6 CK, 0 ms\n");}
 664:	c8 2f       	mov	r28, r24
 666:	d0 e0       	ldi	r29, 0x00	; 0
 668:	ce 01       	movw	r24, r28
 66a:	80 73       	andi	r24, 0x30	; 48
 66c:	90 70       	andi	r25, 0x00	; 0
 66e:	64 e0       	ldi	r22, 0x04	; 4
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	6a 95       	dec	r22
 676:	e1 f7       	brne	.-8      	; 0x670 <atmega8+0x5a>
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	19 f4       	brne	.+6      	; 0x682 <atmega8+0x6c>
 67c:	8d e7       	ldi	r24, 0x7D	; 125
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0a c0       	rjmp	.+20     	; 0x696 <atmega8+0x80>
else if(((var & 0x30)>>4)==1)  {                        dbg_print_text("Start-up time : 6 CK, 4 ms\n");}
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	91 05       	cpc	r25, r1
 686:	19 f4       	brne	.+6      	; 0x68e <atmega8+0x78>
 688:	86 ed       	ldi	r24, 0xD6	; 214
 68a:	94 e0       	ldi	r25, 0x04	; 4
 68c:	04 c0       	rjmp	.+8      	; 0x696 <atmega8+0x80>
else if(((var & 0x30)>>4)==2)  {                        dbg_print_text("Start-up time : 6 CK, 64 ms\n");}
 68e:	02 97       	sbiw	r24, 0x02	; 2
 690:	21 f4       	brne	.+8      	; 0x69a <atmega8+0x84>
 692:	82 ef       	ldi	r24, 0xF2	; 242
 694:	94 e0       	ldi	r25, 0x04	; 4
 696:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<7))==0){                                  dbg_print_text("BOD level     : 4.0v\n");}
 69a:	17 fd       	sbrc	r17, 7
 69c:	03 c0       	rjmp	.+6      	; 0x6a4 <atmega8+0x8e>
 69e:	8f e0       	ldi	r24, 0x0F	; 15
 6a0:	95 e0       	ldi	r25, 0x05	; 5
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <atmega8+0x92>
else{                                                     dbg_print_text("BOD level     : 2.7v\n");}
 6a4:	85 e2       	ldi	r24, 0x25	; 37
 6a6:	95 e0       	ldi	r25, 0x05	; 5
 6a8:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<6))==0){                                  dbg_print_text("BOD status    : Enabled\n");}
 6ac:	c6 fd       	sbrc	r28, 6
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <atmega8+0xa0>
 6b0:	8b e3       	ldi	r24, 0x3B	; 59
 6b2:	95 e0       	ldi	r25, 0x05	; 5
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <atmega8+0xa4>
else{                                                     dbg_print_text("BOD status    : Disabled\n");}
 6b6:	84 e5       	ldi	r24, 0x54	; 84
 6b8:	95 e0       	ldi	r25, 0x05	; 5
 6ba:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>

var=Hfuse();
 6be:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Hfuse>
if((var & (1<<0))==0){                                  dbg_print_text("Boot Reset    : Enabled\n");}
 6c2:	c8 2f       	mov	r28, r24
 6c4:	d0 e0       	ldi	r29, 0x00	; 0
 6c6:	80 fd       	sbrc	r24, 0
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <atmega8+0xba>
 6ca:	84 e6       	ldi	r24, 0x64	; 100
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <atmega8+0xbe>
else{                                                     dbg_print_text("Boot Reset    : Disabled\n");}
 6d0:	8d e7       	ldi	r24, 0x7D	; 125
 6d2:	92 e0       	ldi	r25, 0x02	; 2
 6d4:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if     (((var & 0x06)>>1)==0){                          dbg_print_text("Boot Size     : 1024 words (2048 bytes)\n");}
 6d8:	ce 01       	movw	r24, r28
 6da:	86 70       	andi	r24, 0x06	; 6
 6dc:	90 70       	andi	r25, 0x00	; 0
 6de:	95 95       	asr	r25
 6e0:	87 95       	ror	r24
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	19 f4       	brne	.+6      	; 0x6ec <atmega8+0xd6>
 6e6:	80 ec       	ldi	r24, 0xC0	; 192
 6e8:	92 e0       	ldi	r25, 0x02	; 2
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <atmega8+0xf0>
else if(((var & 0x06)>>1)==1){                          dbg_print_text("Boot Size     : 512 words (1024 bytes)\n");}
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	91 05       	cpc	r25, r1
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <atmega8+0xe2>
 6f2:	8e e6       	ldi	r24, 0x6E	; 110
 6f4:	95 e0       	ldi	r25, 0x05	; 5
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <atmega8+0xf0>
else if(((var & 0x06)>>1)==2){                          dbg_print_text("Boot Size     : 256 words(512 bytes)\n");}
 6f8:	02 97       	sbiw	r24, 0x02	; 2
 6fa:	19 f4       	brne	.+6      	; 0x702 <atmega8+0xec>
 6fc:	80 e1       	ldi	r24, 0x10	; 16
 6fe:	93 e0       	ldi	r25, 0x03	; 3
 700:	02 c0       	rjmp	.+4      	; 0x706 <atmega8+0xf0>
else if(((var & 0x06)>>1)==3){                          dbg_print_text("Boot Size     : 128 words(256 bytes)\n");}
 702:	86 e9       	ldi	r24, 0x96	; 150
 704:	95 e0       	ldi	r25, 0x05	; 5
 706:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<3))==0){                                  dbg_print_text("EESAVE        : Enabled (EEPROM preserved when chip erased)\n");}
 70a:	c3 fd       	sbrc	r28, 3
 70c:	03 c0       	rjmp	.+6      	; 0x714 <atmega8+0xfe>
 70e:	86 e3       	ldi	r24, 0x36	; 54
 710:	93 e0       	ldi	r25, 0x03	; 3
 712:	02 c0       	rjmp	.+4      	; 0x718 <atmega8+0x102>
else{                                                     dbg_print_text("EESAVE        : Disabled (EEPROM erased when chip erased)\n");}
 714:	83 e7       	ldi	r24, 0x73	; 115
 716:	93 e0       	ldi	r25, 0x03	; 3
 718:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<4))==0){                                  dbg_print_text("CKOPT         : Enabled (Oscillator option, High power swing on)\n");}
 71c:	c4 fd       	sbrc	r28, 4
 71e:	03 c0       	rjmp	.+6      	; 0x726 <atmega8+0x110>
 720:	8c eb       	ldi	r24, 0xBC	; 188
 722:	95 e0       	ldi	r25, 0x05	; 5
 724:	02 c0       	rjmp	.+4      	; 0x72a <atmega8+0x114>
else{                                                     dbg_print_text("CKOPT         : Disabled (Oscillator option, High power swing off)\n");}
 726:	8e ef       	ldi	r24, 0xFE	; 254
 728:	95 e0       	ldi	r25, 0x05	; 5
 72a:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if((var & (1<<6))==0){                                  dbg_print_text("WDTON         : Enabled (Watchdog always on)\n");}
 72e:	c6 fd       	sbrc	r28, 6
 730:	03 c0       	rjmp	.+6      	; 0x738 <atmega8+0x122>
 732:	81 ee       	ldi	r24, 0xE1	; 225
 734:	93 e0       	ldi	r25, 0x03	; 3
 736:	02 c0       	rjmp	.+4      	; 0x73c <atmega8+0x126>
else                   {                                  dbg_print_text("WDTON         : disabled (Watchdog off)\n");}
 738:	8f e0       	ldi	r24, 0x0F	; 15
 73a:	94 e0       	ldi	r25, 0x04	; 4
 73c:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
dbg_print_text("\nFuse Bits     : LF[");
 740:	88 e3       	ldi	r24, 0x38	; 56
 742:	94 e0       	ldi	r25, 0x04	; 4
 744:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
                     var=Lfuse();
 748:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lfuse>
					 dbg_print_hex(var);
 74c:	0e 94 07 01 	call	0x20e	; 0x20e <dbg_print_hex>
					 dbg_print_text("]  HF[");
 750:	8d e4       	ldi	r24, 0x4D	; 77
 752:	94 e0       	ldi	r25, 0x04	; 4
 754:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
					 var=Hfuse();
 758:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Hfuse>
					 dbg_print_hex(var);
 75c:	0e 94 07 01 	call	0x20e	; 0x20e <dbg_print_hex>
					 dbg_print_text("]\n");
 760:	84 e5       	ldi	r24, 0x54	; 84
 762:	94 e0       	ldi	r25, 0x04	; 4
 764:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	08 95       	ret

00000770 <main>:
#include "isp.h"
#include "fuse.h"
#include "deep_sleep.h"
 

int main(void){
 770:	80 e1       	ldi	r24, 0x10	; 16
 772:	97 e2       	ldi	r25, 0x27	; 39
 774:	28 ec       	ldi	r18, 0xC8	; 200
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	f9 01       	movw	r30, r18
 77a:	31 97       	sbiw	r30, 0x01	; 1
 77c:	f1 f7       	brne	.-4      	; 0x77a <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 77e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 780:	d9 f7       	brne	.-10     	; 0x778 <main+0x8>
_delay_ms(1000);
dbg_print_text("\n\n");
 782:	82 e4       	ldi	r24, 0x42	; 66
 784:	96 e0       	ldi	r25, 0x06	; 6
 786:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
dbg_print_text("------------------------------------------------------------------\n");
 78a:	85 e4       	ldi	r24, 0x45	; 69
 78c:	96 e0       	ldi	r25, 0x06	; 6
 78e:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
dbg_print_text("                 AVR standalone programmer & debugger\n");
 792:	89 e8       	ldi	r24, 0x89	; 137
 794:	96 e0       	ldi	r25, 0x06	; 6
 796:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
dbg_print_text("------------------------------------------------------------------\n\n");
 79a:	80 ec       	ldi	r24, 0xC0	; 192
 79c:	96 e0       	ldi	r25, 0x06	; 6
 79e:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
if(prgm_mode()==1){
 7a2:	0e 94 a4 01 	call	0x348	; 0x348 <prgm_mode>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	a9 f4       	brne	.+42     	; 0x7d4 <main+0x64>
                     led(1);
 7aa:	0e 94 84 01 	call	0x308	; 0x308 <led>
					 dbg_print_text("Device        : OK\n");
 7ae:	85 e0       	ldi	r24, 0x05	; 5
 7b0:	97 e0       	ldi	r25, 0x07	; 7
 7b2:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
					 uint8_t device=0x00;
					 device=device_ID(2);
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	0e 94 cf 01 	call	0x39e	; 0x39e <device_ID>
					 if     (device==ATmega8)   {atmega8();}
 7bc:	87 30       	cpi	r24, 0x07	; 7
 7be:	19 f4       	brne	.+6      	; 0x7c6 <main+0x56>
 7c0:	0e 94 0b 03 	call	0x616	; 0x616 <atmega8>
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <main+0x6c>
					 else if(device==ATmega328p){atmega328p();}
 7c6:	8f 30       	cpi	r24, 0x0F	; 15
 7c8:	11 f0       	breq	.+4      	; 0x7ce <main+0x5e>
					 else if(device==ATmega328) {atmega328p();}
 7ca:	84 31       	cpi	r24, 0x14	; 20
 7cc:	39 f4       	brne	.+14     	; 0x7dc <main+0x6c>
 7ce:	0e 94 60 02 	call	0x4c0	; 0x4c0 <atmega328p>
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <main+0x6c>
					 }
else{
                     dbg_print_text("Device        : Error\n");
 7d4:	89 e1       	ldi	r24, 0x19	; 25
 7d6:	97 e0       	ldi	r25, 0x07	; 7
 7d8:	0e 94 3e 02 	call	0x47c	; 0x47c <dbg_print_text>
					 
					 }
led(0);
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	0e 94 84 01 	call	0x308	; 0x308 <led>
 7e2:	80 ed       	ldi	r24, 0xD0	; 208
 7e4:	97 e0       	ldi	r25, 0x07	; 7
 7e6:	28 ec       	ldi	r18, 0xC8	; 200
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	f9 01       	movw	r30, r18
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <main+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7f2:	d9 f7       	brne	.-10     	; 0x7ea <main+0x7a>
_delay_ms(200);

while(1){
          
		  deep_sleep();
 7f4:	0e 94 2c 02 	call	0x458	; 0x458 <deep_sleep>
 7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <main+0x84>

000007fa <__cmpsf2>:
 7fa:	2f d0       	rcall	.+94     	; 0x85a <__fp_cmp>
 7fc:	08 f4       	brcc	.+2      	; 0x800 <__cmpsf2+0x6>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	08 95       	ret

00000802 <__fixunssfsi>:
 802:	57 d0       	rcall	.+174    	; 0x8b2 <__fp_splitA>
 804:	88 f0       	brcs	.+34     	; 0x828 <__fixunssfsi+0x26>
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	90 f0       	brcs	.+36     	; 0x82e <__fixunssfsi+0x2c>
 80a:	b9 2f       	mov	r27, r25
 80c:	99 27       	eor	r25, r25
 80e:	b7 51       	subi	r27, 0x17	; 23
 810:	a0 f0       	brcs	.+40     	; 0x83a <__fixunssfsi+0x38>
 812:	d1 f0       	breq	.+52     	; 0x848 <__fixunssfsi+0x46>
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	1a f0       	brmi	.+6      	; 0x824 <__fixunssfsi+0x22>
 81e:	ba 95       	dec	r27
 820:	c9 f7       	brne	.-14     	; 0x814 <__fixunssfsi+0x12>
 822:	12 c0       	rjmp	.+36     	; 0x848 <__fixunssfsi+0x46>
 824:	b1 30       	cpi	r27, 0x01	; 1
 826:	81 f0       	breq	.+32     	; 0x848 <__fixunssfsi+0x46>
 828:	5e d0       	rcall	.+188    	; 0x8e6 <__fp_zero>
 82a:	b1 e0       	ldi	r27, 0x01	; 1
 82c:	08 95       	ret
 82e:	5b c0       	rjmp	.+182    	; 0x8e6 <__fp_zero>
 830:	67 2f       	mov	r22, r23
 832:	78 2f       	mov	r23, r24
 834:	88 27       	eor	r24, r24
 836:	b8 5f       	subi	r27, 0xF8	; 248
 838:	39 f0       	breq	.+14     	; 0x848 <__fixunssfsi+0x46>
 83a:	b9 3f       	cpi	r27, 0xF9	; 249
 83c:	cc f3       	brlt	.-14     	; 0x830 <__fixunssfsi+0x2e>
 83e:	86 95       	lsr	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b3 95       	inc	r27
 846:	d9 f7       	brne	.-10     	; 0x83e <__fixunssfsi+0x3c>
 848:	3e f4       	brtc	.+14     	; 0x858 <__fixunssfsi+0x56>
 84a:	90 95       	com	r25
 84c:	80 95       	com	r24
 84e:	70 95       	com	r23
 850:	61 95       	neg	r22
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	8f 4f       	sbci	r24, 0xFF	; 255
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	08 95       	ret

0000085a <__fp_cmp>:
 85a:	99 0f       	add	r25, r25
 85c:	00 08       	sbc	r0, r0
 85e:	55 0f       	add	r21, r21
 860:	aa 0b       	sbc	r26, r26
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	fe ef       	ldi	r31, 0xFE	; 254
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	e8 07       	cpc	r30, r24
 86c:	f9 07       	cpc	r31, r25
 86e:	c0 f0       	brcs	.+48     	; 0x8a0 <__fp_cmp+0x46>
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	e4 07       	cpc	r30, r20
 876:	f5 07       	cpc	r31, r21
 878:	98 f0       	brcs	.+38     	; 0x8a0 <__fp_cmp+0x46>
 87a:	62 1b       	sub	r22, r18
 87c:	73 0b       	sbc	r23, r19
 87e:	84 0b       	sbc	r24, r20
 880:	95 0b       	sbc	r25, r21
 882:	39 f4       	brne	.+14     	; 0x892 <__fp_cmp+0x38>
 884:	0a 26       	eor	r0, r26
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_cmp+0x46>
 888:	23 2b       	or	r18, r19
 88a:	24 2b       	or	r18, r20
 88c:	25 2b       	or	r18, r21
 88e:	21 f4       	brne	.+8      	; 0x898 <__fp_cmp+0x3e>
 890:	08 95       	ret
 892:	0a 26       	eor	r0, r26
 894:	09 f4       	brne	.+2      	; 0x898 <__fp_cmp+0x3e>
 896:	a1 40       	sbci	r26, 0x01	; 1
 898:	a6 95       	lsr	r26
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	81 1d       	adc	r24, r1
 89e:	81 1d       	adc	r24, r1
 8a0:	08 95       	ret

000008a2 <__fp_split3>:
 8a2:	57 fd       	sbrc	r21, 7
 8a4:	90 58       	subi	r25, 0x80	; 128
 8a6:	44 0f       	add	r20, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	59 f0       	breq	.+22     	; 0x8c2 <__fp_splitA+0x10>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	71 f0       	breq	.+28     	; 0x8cc <__fp_splitA+0x1a>
 8b0:	47 95       	ror	r20

000008b2 <__fp_splitA>:
 8b2:	88 0f       	add	r24, r24
 8b4:	97 fb       	bst	r25, 7
 8b6:	99 1f       	adc	r25, r25
 8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_splitA+0x20>
 8ba:	9f 3f       	cpi	r25, 0xFF	; 255
 8bc:	79 f0       	breq	.+30     	; 0x8dc <__fp_splitA+0x2a>
 8be:	87 95       	ror	r24
 8c0:	08 95       	ret
 8c2:	12 16       	cp	r1, r18
 8c4:	13 06       	cpc	r1, r19
 8c6:	14 06       	cpc	r1, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	f2 cf       	rjmp	.-28     	; 0x8b0 <__fp_split3+0xe>
 8cc:	46 95       	lsr	r20
 8ce:	f1 df       	rcall	.-30     	; 0x8b2 <__fp_splitA>
 8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <__fp_splitA+0x30>
 8d2:	16 16       	cp	r1, r22
 8d4:	17 06       	cpc	r1, r23
 8d6:	18 06       	cpc	r1, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	f1 cf       	rjmp	.-30     	; 0x8be <__fp_splitA+0xc>
 8dc:	86 95       	lsr	r24
 8de:	71 05       	cpc	r23, r1
 8e0:	61 05       	cpc	r22, r1
 8e2:	08 94       	sec
 8e4:	08 95       	ret

000008e6 <__fp_zero>:
 8e6:	e8 94       	clt

000008e8 <__fp_szero>:
 8e8:	bb 27       	eor	r27, r27
 8ea:	66 27       	eor	r22, r22
 8ec:	77 27       	eor	r23, r23
 8ee:	cb 01       	movw	r24, r22
 8f0:	97 f9       	bld	r25, 7
 8f2:	08 95       	ret

000008f4 <__mulsf3>:
 8f4:	0b d0       	rcall	.+22     	; 0x90c <__mulsf3x>
 8f6:	78 c0       	rjmp	.+240    	; 0x9e8 <__fp_round>
 8f8:	69 d0       	rcall	.+210    	; 0x9cc <__fp_pscA>
 8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0x7>
 8fc:	6e d0       	rcall	.+220    	; 0x9da <__fp_pscB>
 8fe:	18 f0       	brcs	.+6      	; 0x906 <__stack+0x7>
 900:	95 23       	and	r25, r21
 902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
 904:	5a c0       	rjmp	.+180    	; 0x9ba <__fp_inf>
 906:	5f c0       	rjmp	.+190    	; 0x9c6 <__fp_nan>
 908:	11 24       	eor	r1, r1
 90a:	ee cf       	rjmp	.-36     	; 0x8e8 <__fp_szero>

0000090c <__mulsf3x>:
 90c:	ca df       	rcall	.-108    	; 0x8a2 <__fp_split3>
 90e:	a0 f3       	brcs	.-24     	; 0x8f8 <__mulsf3+0x4>

00000910 <__mulsf3_pse>:
 910:	95 9f       	mul	r25, r21
 912:	d1 f3       	breq	.-12     	; 0x908 <__stack+0x9>
 914:	95 0f       	add	r25, r21
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	55 1f       	adc	r21, r21
 91a:	62 9f       	mul	r22, r18
 91c:	f0 01       	movw	r30, r0
 91e:	72 9f       	mul	r23, r18
 920:	bb 27       	eor	r27, r27
 922:	f0 0d       	add	r31, r0
 924:	b1 1d       	adc	r27, r1
 926:	63 9f       	mul	r22, r19
 928:	aa 27       	eor	r26, r26
 92a:	f0 0d       	add	r31, r0
 92c:	b1 1d       	adc	r27, r1
 92e:	aa 1f       	adc	r26, r26
 930:	64 9f       	mul	r22, r20
 932:	66 27       	eor	r22, r22
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	66 1f       	adc	r22, r22
 93a:	82 9f       	mul	r24, r18
 93c:	22 27       	eor	r18, r18
 93e:	b0 0d       	add	r27, r0
 940:	a1 1d       	adc	r26, r1
 942:	62 1f       	adc	r22, r18
 944:	73 9f       	mul	r23, r19
 946:	b0 0d       	add	r27, r0
 948:	a1 1d       	adc	r26, r1
 94a:	62 1f       	adc	r22, r18
 94c:	83 9f       	mul	r24, r19
 94e:	a0 0d       	add	r26, r0
 950:	61 1d       	adc	r22, r1
 952:	22 1f       	adc	r18, r18
 954:	74 9f       	mul	r23, r20
 956:	33 27       	eor	r19, r19
 958:	a0 0d       	add	r26, r0
 95a:	61 1d       	adc	r22, r1
 95c:	23 1f       	adc	r18, r19
 95e:	84 9f       	mul	r24, r20
 960:	60 0d       	add	r22, r0
 962:	21 1d       	adc	r18, r1
 964:	82 2f       	mov	r24, r18
 966:	76 2f       	mov	r23, r22
 968:	6a 2f       	mov	r22, r26
 96a:	11 24       	eor	r1, r1
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	8a f0       	brmi	.+34     	; 0x994 <__mulsf3_pse+0x84>
 972:	e1 f0       	breq	.+56     	; 0x9ac <__mulsf3_pse+0x9c>
 974:	88 23       	and	r24, r24
 976:	4a f0       	brmi	.+18     	; 0x98a <__mulsf3_pse+0x7a>
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	bb 1f       	adc	r27, r27
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	a9 f7       	brne	.-22     	; 0x974 <__mulsf3_pse+0x64>
 98a:	9e 3f       	cpi	r25, 0xFE	; 254
 98c:	51 05       	cpc	r21, r1
 98e:	70 f0       	brcs	.+28     	; 0x9ac <__mulsf3_pse+0x9c>
 990:	14 c0       	rjmp	.+40     	; 0x9ba <__fp_inf>
 992:	aa cf       	rjmp	.-172    	; 0x8e8 <__fp_szero>
 994:	5f 3f       	cpi	r21, 0xFF	; 255
 996:	ec f3       	brlt	.-6      	; 0x992 <__mulsf3_pse+0x82>
 998:	98 3e       	cpi	r25, 0xE8	; 232
 99a:	dc f3       	brlt	.-10     	; 0x992 <__mulsf3_pse+0x82>
 99c:	86 95       	lsr	r24
 99e:	77 95       	ror	r23
 9a0:	67 95       	ror	r22
 9a2:	b7 95       	ror	r27
 9a4:	f7 95       	ror	r31
 9a6:	e7 95       	ror	r30
 9a8:	9f 5f       	subi	r25, 0xFF	; 255
 9aa:	c1 f7       	brne	.-16     	; 0x99c <__mulsf3_pse+0x8c>
 9ac:	fe 2b       	or	r31, r30
 9ae:	88 0f       	add	r24, r24
 9b0:	91 1d       	adc	r25, r1
 9b2:	96 95       	lsr	r25
 9b4:	87 95       	ror	r24
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret

000009ba <__fp_inf>:
 9ba:	97 f9       	bld	r25, 7
 9bc:	9f 67       	ori	r25, 0x7F	; 127
 9be:	80 e8       	ldi	r24, 0x80	; 128
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	08 95       	ret

000009c6 <__fp_nan>:
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	80 ec       	ldi	r24, 0xC0	; 192
 9ca:	08 95       	ret

000009cc <__fp_pscA>:
 9cc:	00 24       	eor	r0, r0
 9ce:	0a 94       	dec	r0
 9d0:	16 16       	cp	r1, r22
 9d2:	17 06       	cpc	r1, r23
 9d4:	18 06       	cpc	r1, r24
 9d6:	09 06       	cpc	r0, r25
 9d8:	08 95       	ret

000009da <__fp_pscB>:
 9da:	00 24       	eor	r0, r0
 9dc:	0a 94       	dec	r0
 9de:	12 16       	cp	r1, r18
 9e0:	13 06       	cpc	r1, r19
 9e2:	14 06       	cpc	r1, r20
 9e4:	05 06       	cpc	r0, r21
 9e6:	08 95       	ret

000009e8 <__fp_round>:
 9e8:	09 2e       	mov	r0, r25
 9ea:	03 94       	inc	r0
 9ec:	00 0c       	add	r0, r0
 9ee:	11 f4       	brne	.+4      	; 0x9f4 <__fp_round+0xc>
 9f0:	88 23       	and	r24, r24
 9f2:	52 f0       	brmi	.+20     	; 0xa08 <__fp_round+0x20>
 9f4:	bb 0f       	add	r27, r27
 9f6:	40 f4       	brcc	.+16     	; 0xa08 <__fp_round+0x20>
 9f8:	bf 2b       	or	r27, r31
 9fa:	11 f4       	brne	.+4      	; 0xa00 <__fp_round+0x18>
 9fc:	60 ff       	sbrs	r22, 0
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <__fp_round+0x20>
 a00:	6f 5f       	subi	r22, 0xFF	; 255
 a02:	7f 4f       	sbci	r23, 0xFF	; 255
 a04:	8f 4f       	sbci	r24, 0xFF	; 255
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	08 95       	ret

00000a0a <__udivmodsi4>:
 a0a:	a1 e2       	ldi	r26, 0x21	; 33
 a0c:	1a 2e       	mov	r1, r26
 a0e:	aa 1b       	sub	r26, r26
 a10:	bb 1b       	sub	r27, r27
 a12:	fd 01       	movw	r30, r26
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <__udivmodsi4_ep>

00000a16 <__udivmodsi4_loop>:
 a16:	aa 1f       	adc	r26, r26
 a18:	bb 1f       	adc	r27, r27
 a1a:	ee 1f       	adc	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	a2 17       	cp	r26, r18
 a20:	b3 07       	cpc	r27, r19
 a22:	e4 07       	cpc	r30, r20
 a24:	f5 07       	cpc	r31, r21
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__udivmodsi4_ep>
 a28:	a2 1b       	sub	r26, r18
 a2a:	b3 0b       	sbc	r27, r19
 a2c:	e4 0b       	sbc	r30, r20
 a2e:	f5 0b       	sbc	r31, r21

00000a30 <__udivmodsi4_ep>:
 a30:	66 1f       	adc	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	1a 94       	dec	r1
 a3a:	69 f7       	brne	.-38     	; 0xa16 <__udivmodsi4_loop>
 a3c:	60 95       	com	r22
 a3e:	70 95       	com	r23
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	9b 01       	movw	r18, r22
 a46:	ac 01       	movw	r20, r24
 a48:	bd 01       	movw	r22, r26
 a4a:	cf 01       	movw	r24, r30
 a4c:	08 95       	ret

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
